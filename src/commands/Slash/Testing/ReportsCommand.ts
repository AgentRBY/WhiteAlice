import {
  AutocompleteRunOptions,
  SlashCommand,
  SlashCommandRunOptions,
} from '../../../structures/Commands/SlashCommand';
import { SlashCommandBuilder } from '@discordjs/builders';
import { MessageActionRow, MessageEmbed, MessageSelectMenu, Modal, TextInputComponent, Util } from 'discord.js';
import { ErrorEmbed, SuccessEmbed } from '../../../utils/Discord/Embed';
import { Searcher } from 'fast-fuzzy';
import { Emojis, EmojisIDs } from '../../../static/Emojis';
import dayjs from 'dayjs';
import { Colors } from '../../../static/Colors';
import { Report, ReportStatus } from '../../../typings/GuildModel';
import { client } from '../../../app';

export class ReportsCommand extends SlashCommand {
  meta = new SlashCommandBuilder()
    .setName('report')
    .setDescription('–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–ø–æ—Ä—Ç–∞–º–∏')
    .addSubcommand((subcommand) =>
      subcommand
        .setName('channel')
        .setDescription('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤')
        .addChannelOption((option) =>
          option.setName('channel').setDescription('–ö–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—Å—è —Ä–µ–ø–æ—Ä—Ç—ã').setRequired(true),
        ),
    )
    .addSubcommand((subcommand) => subcommand.setName('bug').setDescription('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç'))
    .addSubcommand((subcommand) =>
      subcommand
        .setName('get')
        .setDescription('–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–µ')
        .addStringOption((option) =>
          option.setName('status').setDescription('–°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ—Ä—Ç–∞').setRequired(true).addChoices(
            {
              name: '–í—Å–µ',
              value: 'Anything',
            },
            {
              name: '–ù–æ–≤—ã–π',
              value: ReportStatus.New,
            },
            {
              name: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
              value: ReportStatus.InProgress,
            },
            {
              name: '–û—Ç–∫–ª–æ–Ω—ë–Ω',
              value: ReportStatus.Declined,
            },
            {
              name: '–°–¥–µ–ª–∞–Ω',
              value: ReportStatus.Done,
            },
          ),
        )
        .addNumberOption((option) =>
          option.setName('id').setDescription('ID —Ä–µ–ø–æ—Ä—Ç–∞').setAutocomplete(true).setRequired(true),
        ),
    )
    .addSubcommand((subcommand) => subcommand.setName('statistics').setDescription('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–ø–æ—Ä—Ç–∞–º'));

  public static statusToString = {
    [ReportStatus.New]: `${Emojis.Add} –ù–æ–≤—ã–π`,
    [ReportStatus.Declined]: `${Emojis.No} –û—Ç–∫–ª–æ–Ω—ë–Ω`,
    [ReportStatus.InProgress]: `${Emojis.Wrench} –í –ø—Ä–æ—Ü–µ—Å—Å–µ`,
    [ReportStatus.Done]: `${Emojis.Yes} –°–¥–µ–ª–∞–Ω`,
  };

  async run({ interaction, client }: SlashCommandRunOptions) {
    const subcommand = interaction.options.getSubcommand();

    if (subcommand === 'channel') {
      if (!interaction.member.permissions.has('ADMINISTRATOR')) {
        const embed = ErrorEmbed('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
        return interaction.reply({ embeds: [embed], ephemeral: true });
      }

      const channel = interaction.options.getChannel('channel', true);

      client.service.setReportsChannel(interaction.guildId, channel.id);

      const embed = SuccessEmbed(`–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤: ${channel}`);

      return interaction.reply({ embeds: [embed], ephemeral: true });
    }

    if (subcommand === 'bug') {
      const reportsChannelId = await client.service.getReportsChannel(interaction.guildId);

      if (!reportsChannelId) {
        const embed = ErrorEmbed('–ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return interaction.reply({ embeds: [embed], ephemeral: true });
      }

      const bugReportModal = this.buildBugReportModal();

      return await interaction.showModal(bugReportModal);
    }

    if (subcommand === 'get') {
      if (!interaction.member.permissions.has('ADMINISTRATOR')) {
        const embed = ErrorEmbed('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
        return interaction.reply({ embeds: [embed], ephemeral: true });
      }

      const reportId = interaction.options.getNumber('id', true);

      const report = await client.service.getReport(interaction.guildId, reportId);

      const embed = await ReportsCommand.buildReportEmbed(report);
      const select = ReportsCommand.buildReportStatusSelect(report);

      return interaction.reply({ embeds: [embed], components: [select] });
    }

    if (subcommand === 'statistics') {
      const reports = await client.service.getReports(interaction.guildId);

      if (!reports.length) {
        const embed = ErrorEmbed('–†–µ–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return interaction.reply({ embeds: [embed] });
      }

      const newReports = reports.filter((report) => report.status === ReportStatus.New).length;
      const inProgressReports = reports.filter((report) => report.status === ReportStatus.InProgress).length;
      const declinedReports = reports.filter((report) => report.status === ReportStatus.Declined).length;
      const doneReports = reports.filter((report) => report.status === ReportStatus.Done).length;

      const mostReportedAuthor = this.mostFrequentValue(reports, 'authorId');
      const mostChangedAuthor = this.mostFrequentValue(reports, 'editedBy');

      const embed = new MessageEmbed()
        .setDescription(
          `# ${Emojis.Documents} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–æ–≤
          
          **‚û§‚ÄÑ –í—Å–µ–≥–æ —Ä–µ–ø–æ—Ä—Ç–æ–≤:** ${reports.length}
          
          **‚û§‚ÄÑ –ù–æ–≤—ã–µ:** ${newReports}
          **‚û§‚ÄÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ:** ${inProgressReports}
          **‚û§‚ÄÑ –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ:** ${declinedReports}
          **‚û§‚ÄÑ –°–¥–µ–ª–∞–Ω–Ω—ã–µ:** ${doneReports}
          
          **‚û§‚ÄÑ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–ø–æ—Ä—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç:** <@${mostReportedAuthor.value}> (${mostReportedAuthor.count} —Ä–µ–ø–æ—Ä—Ç–æ–≤)
          ${mostChangedAuthor.count ? `**‚û§‚ÄÑ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–ø–æ—Ä—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ:** <@${mostChangedAuthor.value}> (${mostChangedAuthor.count} —Ä–µ–ø–æ—Ä—Ç–æ–≤)` : ''}`,
        )
        .setColor(Colors.Blue);

      return interaction.reply({ embeds: [embed] });
    }
  }

  async handleAutocomplete({ interaction, client }: AutocompleteRunOptions) {
    const focusedValue = interaction.options.getFocused(true);

    if (focusedValue.name !== 'id') {
      return;
    }

    const status = interaction.options.getString('status', true);

    const reports = await client.service.getReports(interaction.guildId);

    const mappedReports = reports
      .toReversed()
      .filter((report) => (status === 'Anything' ? true : report.status === status))
      .map((reports) => {
        return {
          name: `üìÑ –†–µ–ø–æ—Ä—Ç ‚Ññ${reports.id} –æ—Ç ${client.users.cache.get(reports.authorId)?.displayName} –≤ ${dayjs(reports.createdAt).format('HH:mm, DD.MM.YY')}`,
          value: String(reports.id),
        };
      });

    if (focusedValue.value === '') {
      await interaction.respond(mappedReports.slice(0, 25));
      return;
    }

    const searcher = new Searcher(mappedReports, {
      keySelector: (item) => item.name,
    });

    const filteredReports = searcher.search(focusedValue.value as string);

    await interaction.respond(filteredReports.slice(0, 25));
  }

  static buildReportEmbed(report: Report) {
    return new MessageEmbed()
      .setDescription(
        `# ${Emojis.Documents} –ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç ‚Ññ${report.id}
        
### **‚û§‚ÄÑ–ê–≤—Ç–æ—Ä:** <@${report.authorId}>
        
### **‚û§‚ÄÑ–°—Ç–∞—Ç—É—Å:** ${ReportsCommand.statusToString[report.status]}
        
### **‚û§‚ÄÑ–û–ø–∏—Å–∞–Ω–∏–µ:**
        
‚ÄÉ‚ÄÇ‚ÄÜ${report.description.trim()}
### **‚û§‚ÄÑ–°–∫—Ä–∏–Ω—à–æ—Ç—ã:**
         
${report.links.trim() || '_–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç_'}
        
-# –†–µ–ø–æ—Ä—Ç –æ—Ç **${dayjs(report.createdAt).format('HH:mm, DD.MM.YY')}**
${report.editedAt ? `-# –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω **${Util.escapeMarkdown(client.users.cache.get(report.editedBy).displayName)}** –≤ **${dayjs(report.editedAt).format('HH:mm, DD.MM.YY')}**` : ''}`,
      )
      .setColor(Colors.Blue);
  }

  static buildReportStatusSelect(report: Report): MessageActionRow<MessageSelectMenu> {
    const select = new MessageSelectMenu()
      .setCustomId(`report-status-select-${report.id}`)
      .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞')
      .addOptions([
        {
          label: '–ù–æ–≤—ã–π',
          value: ReportStatus.New,
          description: '–ù–æ–≤—ã–π –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç',
          emoji: EmojisIDs.Add,
          default: report.status === ReportStatus.New,
        },
        {
          label: '–û—Ç–∫–ª–æ–Ω—ë–Ω',
          value: ReportStatus.Declined,
          description: '–ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω',
          emoji: EmojisIDs.No,
          default: report.status === ReportStatus.Declined,
        },
        {
          label: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
          value: ReportStatus.InProgress,
          description: '–ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ—à–µ–Ω–∏—è',
          emoji: EmojisIDs.Wrench,
          default: report.status === ReportStatus.InProgress,
        },
        {
          label: '–°–¥–µ–ª–∞–Ω',
          value: ReportStatus.Done,
          description: '–ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç —Å–¥–µ–ª–∞–Ω',
          emoji: EmojisIDs.Yes,
          default: report.status === ReportStatus.Done,
        },
      ]);

    return new MessageActionRow<MessageSelectMenu>().addComponents(select);
  }

  private buildBugReportModal() {
    const modal = new Modal().setCustomId('report-modal').setTitle('Report a bug');

    const bugDescription = new TextInputComponent()
      .setCustomId('report-modal-description')
      .setPlaceholder('–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –≤–∞—à –±–∞–≥')
      .setLabel('–û–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞')
      .setRequired(true)
      .setStyle(2);
    const bugLinks = new TextInputComponent()
      .setCustomId('report-modal-links')
      .setPlaceholder('–î–æ–±–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ')
      .setLabel('–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã')
      .setRequired(false)
      .setStyle(2);

    const firstRow = new MessageActionRow().addComponents(bugDescription);
    const secondRow = new MessageActionRow().addComponents(bugLinks);

    // @ts-ignore Fixed in d.js 14
    modal.addComponents(firstRow, secondRow);

    return modal;
  }

  private mostFrequentValue(array: unknown[], key: unknown): { value: unknown; count: number } | null {
    const frequencyMap: { [key: string]: number } = {};
    let mostFrequent: typeof key = '';
    let maxCount = 0;

    array.forEach((item) => {
      const value = item[key as string];
      if (value !== undefined) {
        frequencyMap[value] = (frequencyMap[value] || 0) + 1;
        if (frequencyMap[value] > maxCount) {
          maxCount = frequencyMap[value];
          mostFrequent = value;
        }
      }
    });

    return mostFrequent === null ? null : { value: mostFrequent, count: maxCount };
  }
}

export default new ReportsCommand();
