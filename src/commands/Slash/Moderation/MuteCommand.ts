import { SlashCommandBuilder } from '@discordjs/builders';
import { GuildMember, MessageEmbed } from 'discord.js';
import moment from 'moment/moment';
import { Colors } from '../../../static/Colors';
import { Emojis } from '../../../static/Emojis';
import { SlashCommand, SlashCommandRunOptions } from '../../../structures/Commands/SlashCommand';
import { Mute } from '../../../typings/MemberModel';
import { formatDuration, formatDurationInPast, getDurationFromString } from '../../../utils/Common/Date';
import { ErrorEmbed, SuccessEmbed } from '../../../utils/Discord/Embed';
import { getMemberBaseId } from '../../../utils/Other';

class MuteCommand extends SlashCommand {
  meta = new SlashCommandBuilder()
    .setName('mute')
    .setDescription('–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    .addUserOption((option) => {
      return option.setName('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å').setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å').setRequired(true);
    })
    .addStringOption((option) => {
      const timeVariants = [
        {
          name: 'üïê 1 —á–∞—Å',
          value: '1h',
        },
        {
          name: 'üïë 2 —á–∞—Å–∞',
          value: '2h',
        },
        {
          name: 'üïì 4 —á–∞—Å–∞',
          value: '4h',
        },
        {
          name: 'üïï 6 —á–∞—Å–æ–≤',
          value: '6h',
        },
        {
          name: 'üïó 8 —á–∞—Å–æ–≤',
          value: '8h',
        },
        {
          name: 'üïõ 12 —á–∞—Å–æ–≤',
          value: '12h',
        },
        {
          name: 'üïï 18 —á–∞—Å–æ–≤',
          value: '18h',
        },
        {
          name: 'üïõ 24 —á–∞—Å–∞',
          value: '24h',
        },
        {
          name: 'üïõ 1 –¥–µ–Ω—å',
          value: '1d',
        },
      ];

      return option
        .setName('–≤—Ä–µ–º—è')
        .setDescription('–í—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        .setRequired(true)
        .addChoices(...timeVariants);
    })
    .addStringOption((option) => {
      return option.setName('–ø—Ä–∏—á–∏–Ω–∞').setDescription('–ü—Ä–∏—á–∏–Ω–∞ –º—É—Ç–∞').setRequired(false);
    })
    .addBooleanOption((option) => {
      return option
        .setName('–Ω–∞—Å–∏–ª—å–Ω–æ')
        .setDescription('–ü–µ—Ä–µ–º—É—Ç–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤ –º—É—Ç–µ')
        .setRequired(false);
    });

  async run({ client, interaction }: SlashCommandRunOptions) {
    if (!interaction.memberPermissions.has('BAN_MEMBERS')) {
      const embed = ErrorEmbed('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
      interaction.reply({
        embeds: [embed],
        ephemeral: true,
      });
      return;
    }

    const targetMember = interaction.options.getMember('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', true);

    if (!(targetMember instanceof GuildMember)) {
      const embed = ErrorEmbed('–û—à–∏–±–∫–∞');
      interaction.reply({
        embeds: [embed],
        ephemeral: true,
      });
      return;
    }

    if (
      targetMember.permissions.has('BAN_MEMBERS') ||
      targetMember.permissions.has('MODERATE_MEMBERS') ||
      targetMember.roles.highest.comparePositionTo(interaction.guild.members.me.roles.highest) >= 0 ||
      targetMember.permissions.has('ADMINISTRATOR')
    ) {
      const embed = ErrorEmbed('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤, —á—Ç–æ –±—ã –∑–∞–º—É—Ç–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      interaction.reply({
        embeds: [embed],
        ephemeral: true,
      });
      return;
    }

    const forceMute = interaction.options.getBoolean('–Ω–∞—Å–∏–ª—å–Ω–æ', false);

    if (targetMember.communicationDisabledUntilTimestamp > Date.now() && !forceMute) {
      const duration = targetMember.communicationDisabledUntilTimestamp - Date.now();

      const embed = ErrorEmbed('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –º—É—Ç–µ');
      embed.setFooter({
        text: `–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ä–∞–∑–º—É—Ç–∞: ${formatDurationInPast(moment.duration(duration))}`,
      });

      interaction.reply({
        embeds: [embed],
        ephemeral: true,
      });
      return;
    }

    const time = getDurationFromString(interaction.options.getString('–≤—Ä–µ–º—è', true));

    const reason = interaction.options.getString('–ø—Ä–∏—á–∏–Ω–∞', false);

    const totalTime = await client.service.calculateMuteTime(getMemberBaseId(targetMember), time.asMilliseconds());
    const formattedTime = formatDuration(moment.duration(totalTime));
    const formattedTotalTimeWithOnlyKarma = formatDurationInPast(moment.duration(totalTime - time.asMilliseconds()));

    const karma = await client.service.getKarma(getMemberBaseId(targetMember));

    const text = karma
      ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetMember} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ ${formattedTime}, –∏–∑ –Ω–∏—Ö ${formattedTotalTimeWithOnlyKarma} (+${karma}%) –æ–Ω –ø–æ–ª—É—á–∏–ª –∏–∑-–∑–∞ –∫–∞—Ä–º—ã`
      : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetMember} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ ${formattedTime}`;
    const directText = `${Emojis.Info} –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ \`${interaction.guild}\` –í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${
      interaction.member
    } –Ω–∞ ${formattedTime}
    ${karma ? `–ò–∑ –Ω–∏—Ö ${formattedTotalTimeWithOnlyKarma} (+${karma}%) –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–∑-–∑–∞ –∫–∞—Ä–º—ã` : ''}`;

    const embed = SuccessEmbed(text);
    const directEmbed = new MessageEmbed().setDescription(directText).setColor(Colors.Red).setTimestamp();

    if (reason) {
      embed.setFooter({ text: `–ü–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}` });
      directEmbed.setFooter({ text: `–ü–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}` });
    }

    await targetMember.timeout(totalTime, reason);

    const mute: Mute = {
      date: Date.now(),
      reason: reason,
      givenBy: interaction.user.id,
      time: totalTime,
    };

    client.service.addMute(getMemberBaseId(targetMember), mute);

    interaction.reply({ embeds: [embed] });
    targetMember.send({ embeds: [directEmbed] });
  }
}

export default new MuteCommand();
