import { CommandExample, CommandRunOptions, CommonCommand } from '../../../structures/Commands/CommonCommand';
import { MessageEmbed, Util } from 'discord.js';
import { Colors } from '../../../static/Colors';
import { Emojis } from '../../../static/Emojis';
import { getMemberFromMessage } from '../../../utils/Discord/Users';
import { getMemberBaseId } from '../../../utils/Other';
import dayjs from 'dayjs';

class Level extends CommonCommand {
  name = 'level';
  category = 'Profile';
  aliases = ['lvl', 'xp', '—É—Ä–æ–≤–µ–Ω—å', '–æ–ø—ã—Ç'];
  description = '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É—á–∞—Å—Ç–Ω–∏–∫–∞';
  examples: CommandExample[] = [
    {
      command: 'level',
      description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å',
    },
    {
      command: 'level @Agent_RBY_',
      description: `–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${Util.escapeMarkdown('Agent_RBY_')}`,
    },
  ];
  usage = 'level [–Ω–∏–∫]';

  async run({ message, client }: CommandRunOptions) {
    const targetMember = getMemberFromMessage(message) || message.member;

    const profile = await client.service.getMemberProfile(getMemberBaseId(targetMember));

    if (!profile.xp || !profile.level) {
      message.sendError('–£—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      return;
    }

    const timeInVoiceDuration = dayjs.duration(profile.timeInVoice);
    const timeInVoice =
      profile.timeInVoice > 0 ? `${timeInVoiceDuration.asHours()}:${timeInVoiceDuration.format('mm:ss')}` : '';
    const timeInVoiceText = timeInVoice ? `‚ÄÑ**|**‚ÄÑüé§ ${timeInVoice}` : '';

    const xpForNextLevel = client.service.getXpByLevel(profile.level + 1) - profile.xp;

    const embed = new MessageEmbed()
      .setColor(Colors.Blue)
      .setTitle(`${Emojis.Competing} –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${Util.escapeMarkdown(targetMember.displayName)}`)
      .setDescription(`‚û§‚ÄÇ**–£—Ä–æ–≤–µ–Ω—å:** ${profile.level}‚ÄÑ**|**‚ÄÑ**–û–ø—ã—Ç:** ${Math.round(profile.xp)}${timeInVoiceText}`)
      .setFooter({ text: `–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${xpForNextLevel} –æ–ø—ã—Ç–∞` });

    message.reply({ embeds: [embed], options: { allowedMentions: { repliedUser: false } } });
  }
}

export default new Level();
